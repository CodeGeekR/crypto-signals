---
// Loading optimization and performance improvements
---

<!-- Critical CSS for above-the-fold content -->
<style is:inline>
  /* Critical styles for hero section - loaded inline for performance */
  .hero-loading {
    background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 100%);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Loading spinner */
  .loader {
    width: 40px;
    height: 40px;
    border: 4px solid #2a2f54;
    border-top: 4px solid #f7931a;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Hide loader when page is loaded */
  .page-loaded .loader {
    display: none;
  }

  /* Fade in content when loaded */
  .page-loaded main {
    opacity: 1;
    transition: opacity 0.5s ease-in-out;
  }

  /* Initial state - hidden */
  main {
    opacity: 0;
  }
</style>

<script is:inline>
  // Performance optimizations and loading management
  (function () {
    // Show loading indicator
    const showLoader = () => {
      const loader = document.getElementById("page-loader");
      if (loader) loader.style.display = "flex";
    };

    // Hide loading indicator and show content
    const hideLoader = () => {
      document.documentElement.classList.add("page-loaded");
      const loader = document.getElementById("page-loader");
      if (loader) {
        setTimeout(() => {
          loader.style.display = "none";
        }, 500);
      }
    };

    // Wait for critical resources to load
    const waitForCriticalResources = () => {
      return Promise.all([
        // Wait for DOM to be ready
        new Promise((resolve) => {
          if (document.readyState === "loading") {
            document.addEventListener("DOMContentLoaded", resolve);
          } else {
            resolve();
          }
        }),
        // Wait for fonts (with timeout)
        new Promise((resolve) => {
          if ("fonts" in document) {
            const fontTimeout = setTimeout(resolve, 2000); // 2s timeout
            document.fonts.ready.then(() => {
              clearTimeout(fontTimeout);
              resolve();
            });
          } else {
            resolve();
          }
        }),
      ]);
    };

    // Initialize loading optimization
    showLoader();

    waitForCriticalResources().then(() => {
      hideLoader();
    });

    // Preload critical images (only those used above the fold)
    const preloadCriticalImages = () => {
      // Only preload images that are actually used in the hero section
      // and visible immediately. OG image and favicon are not critical for performance.
      const criticalImages = [
        // Add actual critical hero images here when needed
        // '/images/hero-bg.webp', // Example of actual critical image
      ];

      // Only preload if we have critical images
      if (criticalImages.length > 0) {
        criticalImages.forEach((src) => {
          const link = document.createElement("link");
          link.rel = "preload";
          link.as = "image";
          link.href = src;
          document.head.appendChild(link);
        });
      }
    };

    // Lazy load non-critical resources
    const lazyLoadResources = () => {
      // Intersection Observer for lazy loading
      if ("IntersectionObserver" in window) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const img = entry.target;
              if (img.dataset.src) {
                img.src = img.dataset.src;
                img.removeAttribute("data-src");
                observer.unobserve(img);
              }
            }
          });
        });

        // Observe all images with data-src
        document.querySelectorAll("img[data-src]").forEach((img) => {
          imageObserver.observe(img);
        });
      }
    };

    // Initialize optimizations when DOM is ready
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () => {
        lazyLoadResources();
      });
    } else {
      lazyLoadResources();
    }
  })();
</script>

<!-- Loading indicator -->
<div id="page-loader" class="hero-loading fixed inset-0 z-50" style="display: none;">
  <div class="text-center">
    <div class="loader mx-auto mb-4"></div>
    <p class="text-white text-sm">Cargando CryptoSe√±ales Pro...</p>
  </div>
</div>

<!-- Flecha simple y elegante -->
<svg class="w-5 h-5 text-white/40 animate-bounce">
  <path d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
</svg>
