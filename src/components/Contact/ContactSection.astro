---
import { TrendingUp, Zap } from "lucide-react";
---

<section id="contact" class="relative py-24 bg-primary-800/50 overflow-hidden">
  <!-- Animated Background Particles -->
  <div class="absolute inset-0 overflow-hidden">
    <div class="crypto-particle absolute top-20 left-10 w-2 h-2 bg-accent-gold rounded-full opacity-60"></div>
    <div class="crypto-particle absolute top-32 right-20 w-3 h-3 bg-accent-green rounded-full opacity-40"></div>
    <div class="crypto-particle absolute bottom-20 left-1/3 w-2 h-2 bg-accent-blue rounded-full opacity-50"></div>
    <div class="crypto-particle absolute bottom-32 right-1/4 w-1 h-1 bg-accent-gold rounded-full opacity-70"></div>
  </div>

  <div class="container mx-auto px-4 sm:px-6 lg:px-8 relative">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-hero font-bold mb-6">
        Únete a la <span
          class="bg-gradient-to-r from-amber-400 via-emerald-400 to-blue-400 bg-clip-text text-transparent"
          >Revolución</span
        >
      </h2>
      <p class="text-xl text-gray-300 max-w-3xl mx-auto mb-8">
        Más de <span class="text-accent-green font-bold">47,000+ traders</span> ya están en lista de espera. ¡No te quedes
        fuera de la oportunidad más grande del 2025!
      </p>

      <!-- Social Proof Counter -->
      <div class="flex flex-col sm:flex-row justify-center items-center gap-4 sm:gap-8 mb-8">
        <div class="text-center" data-social-metric="users">
          <div class="text-2xl sm:text-3xl font-bold text-accent-green" id="userCounter">47,583</div>
          <div class="text-xs sm:text-sm text-gray-400 whitespace-nowrap">En Lista de Espera</div>
        </div>
        <div class="text-center" data-social-metric="signals">
          <div class="text-2xl sm:text-3xl font-bold text-accent-gold" id="signalCounter">2,847,293</div>
          <div class="text-xs sm:text-sm text-gray-400 whitespace-nowrap">Señales Probadas</div>
        </div>
        <div class="text-center" data-social-metric="profits">
          <div class="text-2xl sm:text-3xl font-bold text-accent-blue" id="profitCounter">87.4%</div>
          <div class="text-xs sm:text-sm text-gray-400 whitespace-nowrap">Tasa de Éxito</div>
        </div>
      </div>
    </div>

    <div class="max-w-4xl mx-auto">
      <!-- Waitlist Form - Optimizado para Conversión -->
      <div class="card-glass p-8 rounded-2xl" data-contact-form>
        <div class="mb-6 text-center">
          <h3 class="text-2xl sm:text-3xl font-bold mb-2">🔥 Lista de Espera VIP</h3>
          <p class="text-gray-300 text-base sm:text-lg px-4 sm:px-0">
            Sé de los primeros en acceder cuando lancemos. Recibirás <span class="text-accent-green font-bold"
              >3 señales premium</span
            > completamente gratis.
          </p>

          <!-- Urgency Indicator -->
          <div class="mt-6 p-3 sm:p-4 bg-accent-red/20 border border-accent-red/30 rounded-lg">
            <div class="flex items-center justify-center gap-2">
              <Zap className="w-4 h-4 sm:w-5 sm:h-5 text-accent-red flex-shrink-0" />
              <span class="text-accent-red font-medium text-sm sm:text-base text-center">
                Solo quedan <span id="spotsCounter">47 spots</span> para acceso prioritario
              </span>
            </div>
          </div>
        </div>

        <form id="contact-form" class="space-y-6">
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
            <div>
              <label for="name" class="block text-sm font-medium text-gray-300 mb-2">Nombre</label>
              <input
                type="text"
                id="name"
                name="name"
                class="w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-accent-green focus:border-transparent transition-all duration-300"
                placeholder="Tu nombre completo"
                required
              />
            </div>
            <div>
              <label for="email" class="block text-sm font-medium text-gray-300 mb-2">Email</label>
              <input
                type="email"
                id="email"
                name="email"
                class="w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-accent-green focus:border-transparent transition-all duration-300"
                placeholder="tu@email.com"
                required
              />
            </div>
          </div>

          <div>
            <label for="country" class="block text-sm font-medium text-gray-300 mb-2">País</label>
            <select
              id="country"
              name="country"
              class="w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-accent-green focus:border-transparent transition-all duration-300"
              required
            >
              <option value="" class="bg-primary-800">Selecciona tu país</option>

              <!-- América del Norte -->
              <optgroup label="🇺🇸🇨🇦 América del Norte" class="bg-primary-800 text-gray-300">
                <option value="US" class="bg-primary-800">🇺🇸 Estados Unidos</option>
                <option value="CA" class="bg-primary-800">🇨🇦 Canadá</option>
              </optgroup>

              <!-- LATAM Principales -->
              <optgroup label="🌎 Latinoamérica" class="bg-primary-800 text-gray-300">
                <option value="MX" class="bg-primary-800">🇲🇽 México</option>
                <option value="BR" class="bg-primary-800">🇧🇷 Brasil</option>
                <option value="CO" class="bg-primary-800">🇨🇴 Colombia</option>
                <option value="AR" class="bg-primary-800">🇦🇷 Argentina</option>
                <option value="CL" class="bg-primary-800">🇨🇱 Chile</option>
                <option value="PE" class="bg-primary-800">🇵🇪 Perú</option>
                <option value="EC" class="bg-primary-800">🇪🇨 Ecuador</option>
                <option value="VE" class="bg-primary-800">🇻🇪 Venezuela</option>
                <option value="UY" class="bg-primary-800">🇺🇾 Uruguay</option>
                <option value="PY" class="bg-primary-800">🇵🇾 Paraguay</option>
                <option value="BO" class="bg-primary-800">🇧🇴 Bolivia</option>
              </optgroup>

              <!-- Centroamérica y Caribe -->
              <optgroup label="🏝️ Centroamérica y Caribe" class="bg-primary-800 text-gray-300">
                <option value="CR" class="bg-primary-800">🇨🇷 Costa Rica</option>
                <option value="PA" class="bg-primary-800">🇵🇦 Panamá</option>
                <option value="GT" class="bg-primary-800">🇬🇹 Guatemala</option>
                <option value="HN" class="bg-primary-800">🇭🇳 Honduras</option>
                <option value="NI" class="bg-primary-800">🇳🇮 Nicaragua</option>
                <option value="SV" class="bg-primary-800">🇸🇻 El Salvador</option>
                <option value="BZ" class="bg-primary-800">🇧🇿 Belice</option>
                <option value="DO" class="bg-primary-800">🇩🇴 República Dominicana</option>
                <option value="CU" class="bg-primary-800">🇨🇺 Cuba</option>
                <option value="JM" class="bg-primary-800">🇯🇲 Jamaica</option>
                <option value="HT" class="bg-primary-800">🇭🇹 Haití</option>
                <option value="TT" class="bg-primary-800">🇹🇹 Trinidad y Tobago</option>
              </optgroup>

              <option value="OTHER" class="bg-primary-800">🌎 Otro país</option>
            </select>
          </div>

          <div>
            <label for="experience" class="block text-sm font-medium text-gray-300 mb-2">Experiencia en Trading</label>
            <select
              id="experience"
              name="experience"
              class="w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-accent-green focus:border-transparent transition-all duration-300"
              required
            >
              <option value="" class="bg-primary-800">Tu nivel actual</option>
              <option value="beginner" class="bg-primary-800">🌱 Principiante (quiero aprender)</option>
              <option value="intermediate" class="bg-primary-800">📈 Intermedio (tengo experiencia)</option>
              <option value="advanced" class="bg-primary-800">🏆 Avanzado (busco optimizar)</option>
              <option value="professional" class="bg-primary-800">💎 Profesional (gestiono fondos)</option>
            </select>
          </div>

          <button
            type="submit"
            class="w-full btn-primary group relative overflow-hidden py-4 bg-gradient-to-r from-accent-green to-accent-blue hover:shadow-glow-green transition-all duration-500"
            data-cta-button="waitlist-signup"
          >
            <span class="relative z-10 flex items-center justify-center font-bold text-lg">
              🔥 RESERVAR MI SPOT GRATUITO
              <TrendingUp className="w-6 h-6 ml-2 transform group-hover:translate-x-1 transition-transform" />
            </span>
            <div
              class="absolute inset-0 bg-gradient-to-r from-accent-gold to-accent-green opacity-0 group-hover:opacity-100 transition-opacity duration-300"
            >
            </div>
          </button>

          <!-- Trust Indicators -->
          <div
            class="flex flex-col sm:flex-row items-center justify-center gap-3 sm:gap-6 text-xs sm:text-sm text-gray-400 pt-4"
          >
            <div class="flex items-center gap-1">
              <svg class="w-4 h-4 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                <path
                  fill-rule="evenodd"
                  d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                  clip-rule="evenodd"></path>
              </svg>
              <span class="whitespace-nowrap">100% Gratis</span>
            </div>
            <div class="flex items-center gap-1">
              <svg class="w-4 h-4 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                <path
                  fill-rule="evenodd"
                  d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                  clip-rule="evenodd"></path>
              </svg>
              <span class="whitespace-nowrap">Acceso Prioritario</span>
            </div>
            <div class="flex items-center gap-1">
              <svg class="w-4 h-4 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                <path
                  fill-rule="evenodd"
                  d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                  clip-rule="evenodd"></path>
              </svg>
              <span class="whitespace-nowrap">Sin Compromiso</span>
            </div>
          </div>
        </form>

        <!-- Benefits Section -->
        <div class="mt-12 pt-8 border-t border-white/10" data-benefits-section>
          <h4 class="text-xl font-bold text-center mb-6 text-white" data-benefits-title>
            ¿Qué obtienes al reservar tu spot?
          </h4>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6" data-benefits-grid>
            <div class="text-center benefit-card" data-benefit-item="1">
              <div
                class="w-12 h-12 bg-accent-green/20 rounded-full flex items-center justify-center mx-auto mb-3 benefit-icon"
              >
                <span class="text-2xl">🚀</span>
              </div>
              <h5 class="font-semibold text-white mb-2">Acceso Prioritario</h5>
              <p class="text-sm text-gray-400">
                Serás de los primeros en probar la plataforma antes que el público general.
              </p>
            </div>
            <div class="text-center benefit-card" data-benefit-item="2">
              <div
                class="w-12 h-12 bg-accent-gold/20 rounded-full flex items-center justify-center mx-auto mb-3 benefit-icon"
              >
                <span class="text-2xl">💎</span>
              </div>
              <h5 class="font-semibold text-white mb-2">3 Señales Premium</h5>
              <p class="text-sm text-gray-400">
                Recibirás 3 de nuestras mejores señales para que veas resultados desde el día 1.
              </p>
            </div>
            <div class="text-center benefit-card" data-benefit-item="3">
              <div
                class="w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center mx-auto mb-3 benefit-icon"
              >
                <span class="text-2xl">📈</span>
              </div>
              <h5 class="font-semibold text-white mb-2">Precio Fundador</h5>
              <p class="text-sm text-gray-400">Acceso de por vida al precio más bajo que jamás ofreceremos.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // TypeScript interface declarations for global variables
  declare global {
    interface Window {
      gtag?: (...args: any[]) => void;
      gsap?: any;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    // Form submission handling
    const form = document.getElementById("contact-form");

    form?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const target = e.target as HTMLFormElement;
      const formData = new FormData(target);
      const data = Object.fromEntries(formData.entries());

      // Add UTM parameters and tracking data
      (data as any).utm_source = new URLSearchParams(window.location.search).get("utm_source") || "direct";
      (data as any).utm_medium = new URLSearchParams(window.location.search).get("utm_medium") || "organic";
      (data as any).utm_campaign = new URLSearchParams(window.location.search).get("utm_campaign") || "waitlist_signup";
      (data as any).timestamp = new Date().toISOString();
      (data as any).page_url = window.location.href;
      (data as any).lead_type = "waitlist";

      try {
        // Track conversion event
        if (typeof window.gtag === "function") {
          window.gtag("event", "waitlist_signup", {
            event_category: "conversion",
            event_label: "priority_access",
            value: 1,
          });
        }

        // 🚀 Llamada real a la API
        const response = await fetch("/api/contact", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        const result = await response.json();

        if (!response.ok) {
          // Manejar errores específicos de validación
          if (result.errors) {
            let errorMessage = "Por favor, corrige los siguientes errores:\n";
            Object.entries(result.errors).forEach(([field, messages]) => {
              const messageArray = Array.isArray(messages) ? messages : [messages];
              errorMessage += `• ${messageArray.join(", ")}\n`;
            });
            throw new Error(errorMessage);
          } else {
            throw new Error(result.message || "Error al procesar tu solicitud");
          }
        }

        // Show success state
        const button = target.querySelector('button[type="submit"]') as HTMLButtonElement;
        if (!button) return;

        const originalText = button.innerHTML;

        button.innerHTML = `
          <span class="flex items-center justify-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Reservando tu spot...
          </span>
        `;

        setTimeout(() => {
          button.innerHTML = `
            <span class="flex items-center justify-center text-white">
              ✅ ¡Spot Reservado!
            </span>
          `;
          button.className = button.className.replace(
            "from-accent-green to-accent-blue",
            "from-green-500 to-green-600"
          );

          // Reset form
          target.reset();

          // Success state - el botón ya muestra el estado
          // No se necesitan notificaciones adicionales

          // Reset button after 8 seconds
          setTimeout(() => {
            button.innerHTML = originalText;
            button.className = button.className.replace(
              "from-green-500 to-green-600",
              "from-accent-green to-accent-blue"
            );
          }, 8000);
        }, 2000);
      } catch (error) {
        // Handle error - reset button state
        const button = target.querySelector('button[type="submit"]') as HTMLButtonElement;
        if (button) {
          const originalText = button.innerHTML;
          button.innerHTML = `
            <span class="flex items-center justify-center text-white">
              ❌ Error - Inténtalo de nuevo
            </span>
          `;
          button.className = button.className.replace("from-accent-green to-accent-blue", "from-red-500 to-red-600");

          setTimeout(() => {
            button.innerHTML = originalText;
            button.className = button.className.replace("from-red-500 to-red-600", "from-accent-green to-accent-blue");
          }, 3000);
        }
      }
    });

    // Animated counters
    const animateCounter = (element: HTMLElement, target: number, suffix: string = "") => {
      let current = 0;
      const increment = target / 100;
      const timer = setInterval(() => {
        current += increment;
        if (current >= target) {
          current = target;
          clearInterval(timer);
        }
        element.textContent = Math.floor(current).toLocaleString() + suffix;
      }, 20);
    };

    // Initialize counter elements
    const userCounter = document.getElementById("userCounter") as HTMLElement;
    const signalCounter = document.getElementById("signalCounter") as HTMLElement;
    const profitCounter = document.getElementById("profitCounter") as HTMLElement;
    const spotsCounter = document.getElementById("spotsCounter") as HTMLElement;

    // Set initial values (without animation)
    let baseUsers = 47583;
    let baseSignals = 2847293;
    let baseProfitRate = 87.4;
    let baseSpots = 47;
    let remainingSpots = baseSpots - Math.floor(Math.random() * 10);

    // Set initial static values
    if (userCounter) {
      userCounter.textContent = "0";
    }
    if (signalCounter) {
      signalCounter.textContent = "0";
    }
    if (profitCounter) {
      profitCounter.textContent = "0%";
    }
    if (spotsCounter) {
      spotsCounter.textContent = remainingSpots.toString();
    }

    // Function to trigger stats animations
    let animationsTriggered = false;

    const triggerStatsAnimations = () => {
      if (animationsTriggered) return;
      animationsTriggered = true;

      // Animate counters with random variations for social proof
      if (userCounter) {
        const randomVariation = Math.floor(Math.random() * 100);
        animateCounter(userCounter, baseUsers + randomVariation);
      }

      if (signalCounter) {
        const randomVariation = Math.floor(Math.random() * 1000);
        animateCounter(signalCounter, baseSignals + randomVariation);
      }

      if (profitCounter) {
        const randomVariation = (Math.random() * 2 - 1).toFixed(1); // -1 to +1
        const finalRate = baseProfitRate + parseFloat(randomVariation);

        // Animate profit rate
        let currentRate = 0;
        const rateIncrement = finalRate / 100;
        const rateTimer = setInterval(() => {
          currentRate += rateIncrement;
          if (currentRate >= finalRate) {
            currentRate = finalRate;
            clearInterval(rateTimer);
          }
          profitCounter.textContent = currentRate.toFixed(1) + "%";
        }, 20);
      }

      // Track stats view for analytics
      if (typeof window.gtag === "function") {
        window.gtag("event", "stats_viewed", {
          event_category: "engagement",
          event_label: "contact_section_stats",
          value: 1,
        });
      }
    };

    // Listen for custom event from GSAP
    document.addEventListener("triggerStatsAnimation", triggerStatsAnimations);

    // Fallback: Intersection Observer para activar animaciones cuando la sección es visible
    const statsSection = document.querySelector("[data-social-metric]")?.closest(".flex");

    if (statsSection) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting && !animationsTriggered) {
              triggerStatsAnimations();
            }
          });
        },
        {
          threshold: 0.3, // Trigger when 30% of the stats section is visible
          rootMargin: "0px 0px -50px 0px", // Trigger a bit before the section is fully visible
        }
      );

      observer.observe(statsSection);
    }

    // Decrease spots over time to create urgency (independent of scroll)
    setInterval(() => {
      if (remainingSpots > 1 && spotsCounter) {
        remainingSpots -= Math.floor(Math.random() * 2) + 1;
        spotsCounter.textContent = remainingSpots.toString();
      }
    }, 300000); // 5 minutes

    // Particle animation
    const particles = document.querySelectorAll(".crypto-particle");
    particles.forEach((particle, index) => {
      const delay = index * 0.5;
      const duration = 15 + Math.random() * 10;

      const htmlElement = particle as HTMLElement;
      htmlElement.style.animationDelay = `${delay}s`;
      htmlElement.style.animationDuration = `${duration}s`;
      htmlElement.classList.add("animate-particle-drift");
    });

    // CSS-based animations usando Intersection Observer (lightweight)
    const animateOnScroll = (
      elements: NodeListOf<Element> | Element[],
      options: IntersectionObserverInit = {}
    ): void => {
      if (!("IntersectionObserver" in window)) return;

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("animate-in");
              observer.unobserve(entry.target);
            }
          });
        },
        {
          root: null,
          rootMargin: "20% 0px", // Triggers much earlier
          threshold: 0.1,
          ...options,
        }
      );

      elements.forEach((el: Element) => {
        if (el) {
          el.classList.add("animate-ready");
          observer.observe(el);
        }
      });
    };

    // Optimized animations para benefits - aparecen inmediatamente
    const fastAnimateOnScroll = (
      elements: NodeListOf<Element> | Element[],
      options: IntersectionObserverInit = {}
    ): void => {
      if (!("IntersectionObserver" in window)) {
        // Fallback: mostrar inmediatamente si no hay soporte
        elements.forEach((el: Element) => {
          el.classList.add("animate-ready", "animate-in");
        });
        return;
      }

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("animate-in");
              observer.unobserve(entry.target);
            }
          });
        },
        {
          root: null,
          rootMargin: "50% 0px", // Triggers VERY early for benefits
          threshold: 0.01, // Minimal threshold
          ...options,
        }
      );

      elements.forEach((el: Element) => {
        if (el) {
          el.classList.add("animate-ready");
          observer.observe(el);
        }
      });
    };

    // Animar elementos con diferentes velocidades
    const socialMetrics = document.querySelectorAll("[data-social-metric]");
    const contactForm = document.querySelector("[data-contact-form]");
    const benefitsSection = document.querySelector("[data-benefits-section]");
    const benefitsTitle = document.querySelector("[data-benefits-title]");
    const benefitCards = document.querySelectorAll("[data-benefit-item]");

    // Social metrics - normal speed
    if (socialMetrics.length > 0) {
      socialMetrics.forEach((metric, index) => {
        (metric as HTMLElement).style.setProperty("--animation-delay", `${index * 0.15}s`);
      });
      animateOnScroll(socialMetrics);
    }

    // Contact form - normal speed
    if (contactForm) {
      animateOnScroll([contactForm]);
    }

    // Benefits - FAST animations
    if (benefitsTitle) {
      (benefitsTitle as HTMLElement).style.setProperty("--animation-delay", "0s");
      fastAnimateOnScroll([benefitsTitle]);
    }

    if (benefitCards.length > 0) {
      benefitCards.forEach((card, index) => {
        (card as HTMLElement).style.setProperty("--animation-delay", `${index * 0.1}s`); // Faster stagger
      });
      fastAnimateOnScroll(benefitCards);
    }
  });
</script>

<style>
  @keyframes particle-drift {
    0%,
    100% {
      transform: translateY(0px) translateX(0px);
    }
    25% {
      transform: translateY(-20px) translateX(10px);
    }
    50% {
      transform: translateY(-10px) translateX(-15px);
    }
    75% {
      transform: translateY(-30px) translateX(5px);
    }
  }

  .animate-particle-drift {
    animation: particle-drift linear infinite;
  }

  .btn-primary:hover {
    box-shadow: 0 10px 25px rgba(0, 212, 170, 0.3);
  }

  .shadow-glow-green {
    box-shadow: 0 15px 35px rgba(0, 212, 170, 0.4);
  }

  .card-glass {
    background: rgba(16, 24, 64, 0.3);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  /* Remove unused text-gradient class and enhance gradient support */
  .bg-gradient-to-r.from-accent-gold.via-accent-green.to-accent-blue {
    background: linear-gradient(135deg, #f7931a 0%, #00d4aa 50%, #3b82f6 100%) !important;
    background-size: 200% 200%;
    animation: gradient-shift 3s ease infinite;
  }

  @keyframes gradient-shift {
    0%,
    100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }

  /* CSS animations para reemplazar GSAP/ScrollTrigger - 20KB savings */
  .animate-ready {
    opacity: 0;
    transform: translateY(30px);
  }

  .animate-in {
    opacity: 1;
    transform: translateY(0);
    transition: all 0.8s ease-out;
    transition-delay: var(--animation-delay, 0s);
  }

  [data-contact-form].animate-ready {
    opacity: 0;
    transform: translateY(50px);
  }

  [data-contact-form].animate-in {
    opacity: 1;
    transform: translateY(0);
    transition: all 1s ease-out;
  }

  /* Benefits Section - Optimized for faster appearance */
  [data-benefits-title].animate-ready {
    opacity: 0;
    transform: translateY(20px);
  }

  [data-benefits-title].animate-in {
    opacity: 1;
    transform: translateY(0);
    transition: all 0.4s ease-out;
    transition-delay: 0s !important;
  }

  .benefit-card.animate-ready {
    opacity: 0;
    transform: translateY(25px) scale(0.95);
  }

  .benefit-card.animate-in {
    opacity: 1;
    transform: translateY(0) scale(1);
    transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
    transition-delay: var(--animation-delay, 0s);
  }

  /* Benefit icons bounce effect */
  .benefit-card.animate-in .benefit-icon {
    animation: benefit-icon-bounce 0.6s ease-out;
    animation-delay: calc(var(--animation-delay, 0s) + 0.2s);
  }

  @keyframes benefit-icon-bounce {
    0% {
      transform: scale(0.8);
      opacity: 0;
    }
    50% {
      transform: scale(1.1);
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Reducir movimiento para usuarios con preferencias de accesibilidad */
  @media (prefers-reduced-motion: reduce) {
    .animate-ready,
    .animate-in {
      transform: none !important;
      transition: opacity 0.3s ease !important;
    }
  }
</style>
