---
// Interface para las props del componente
export interface Props {
  targetDate?: string;
  className?: string;
}

const {
  targetDate = "30", // Días por defecto
  className = "",
} = Astro.props;
---

<div class={`countdown-container ${className}`}>
  <!-- Título optimizado - Eliminado emoji -->
  <div class="countdown-title mb-4 text-center">
    <span class="text-xs sm:text-sm text-orange-300 font-medium">Lista VIP cierra en:</span>
  </div>

  <!-- Timer ultra-simplificado - Estructura mínima -->
  <div class="domino-timer flex justify-center items-center gap-2 sm:gap-3 max-w-lg mx-auto">
    <!-- Días -->
    <div class="time-unit">
      <div class="domino-card" id="days-card">--</div>
      <span class="time-label">días</span>
    </div>

    <!-- Horas -->
    <div class="time-unit">
      <div class="domino-card" id="hours-card">--</div>
      <span class="time-label">horas</span>
    </div>

    <!-- Minutos -->
    <div class="time-unit">
      <div class="domino-card" id="minutes-card">--</div>
      <span class="time-label">min</span>
    </div>

    <!-- Segundos -->
    <div class="time-unit">
      <div class="domino-card" id="seconds-card">--</div>
      <span class="time-label">seg</span>
    </div>
  </div>

  <!-- Estado de expiración simplificado -->
  <div class="countdown-expired hidden text-center mt-4 text-red-400 font-bold text-sm">Oferta Expirada</div>
</div>

<style>
  /* Estilos ultra-optimizados - DOM mínimo */
  .countdown-container {
    @apply w-full;
  }

  .time-unit {
    @apply flex flex-col items-center space-y-1;
  }

  .domino-card {
    @apply w-12 h-14 sm:w-14 sm:h-16 md:w-16 md:h-20 rounded-lg flex items-center justify-center;
    @apply text-sm sm:text-base md:text-lg font-bold font-mono text-white;
    background: linear-gradient(145deg, #1e293b, #475569);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.8);
    transition: transform 0.2s ease;
    border: 1px solid rgba(148, 163, 184, 0.2);
  }

  .time-label {
    @apply text-xs text-gray-400 font-medium;
  }

  /* Responsive ultra-optimizado */
  @media (max-width: 480px) {
    .domino-card {
      @apply w-10 h-12 text-xs;
    }

    .time-label {
      @apply text-xs;
    }
  }

  /* Hover efecto mínimo */
  .domino-card:hover {
    transform: translateY(-1px);
  }

  /* Animación de entrada ultra-simplificada */
  .time-unit {
    opacity: 0;
    animation: fadeIn 0.4s ease-out forwards;
  }

  .time-unit:nth-child(1) {
    animation-delay: 0.1s;
  }
  .time-unit:nth-child(2) {
    animation-delay: 0.2s;
  }
  .time-unit:nth-child(3) {
    animation-delay: 0.3s;
  }
  .time-unit:nth-child(4) {
    animation-delay: 0.4s;
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
    from {
      opacity: 0;
      transform: translateY(10px);
    }
  }
</style>

<script>
  // Ultra-lightweight countdown timer - Optimizado para performance
  class OptimizedCountdownTimer {
    private targetDate: Date;
    private intervalId: number | null = null;
    private readonly STORAGE_KEY = "cryptosenales-countdown-target";

    constructor(daysFromNow: number = 30) {
      this.targetDate = this.getOrCreateTargetDate(daysFromNow);
      this.updateTime();
      this.startTimer();
    }

    private getOrCreateTargetDate(daysFromNow: number): Date {
      try {
        const storedTarget = localStorage.getItem(this.STORAGE_KEY);
        if (storedTarget) {
          const savedDate = new Date(storedTarget);
          if (savedDate.getTime() > Date.now()) {
            return savedDate;
          }
        }
      } catch (error) {
        // localStorage no disponible, continuar
      }

      // Fecha objetivo fija para el lanzamiento
      const launchDate = new Date("2025-07-15T23:59:59Z");
      const newTarget =
        launchDate.getTime() > Date.now() ? launchDate : new Date(Date.now() + daysFromNow * 24 * 60 * 60 * 1000);

      try {
        localStorage.setItem(this.STORAGE_KEY, newTarget.toISOString());
      } catch (error) {
        // Fallar silenciosamente
      }

      return newTarget;
    }

    private updateTime(): void {
      const now = Date.now();
      const distance = this.targetDate.getTime() - now;

      if (distance < 0) {
        this.handleExpiration();
        return;
      }

      const days = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);

      // Actualización directa sin animaciones complejas
      this.updateElement("days", days);
      this.updateElement("hours", hours);
      this.updateElement("minutes", minutes);
      this.updateElement("seconds", seconds);
    }

    private updateElement(unit: string, value: number): void {
      const element = document.getElementById(`${unit}-card`);
      if (element) {
        const formattedValue = value.toString().padStart(2, "0");
        if (element.textContent !== formattedValue) {
          element.textContent = formattedValue;
        }
      }
    }

    private handleExpiration(): void {
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }

      // Mostrar estado expirado
      const expiredElement = document.querySelector(".countdown-expired");
      const timerElement = document.querySelector(".domino-timer");

      if (expiredElement && timerElement) {
        timerElement.classList.add("hidden");
        expiredElement.classList.remove("hidden");
      }
    }

    private startTimer(): void {
      // Usar setInterval optimizado
      this.intervalId = window.setInterval(() => {
        this.updateTime();
      }, 1000);
    }

    public destroy(): void {
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }
    }
  }

  // Inicialización optimizada
  document.addEventListener("DOMContentLoaded", () => {
    // Crear timer solo si el elemento existe
    const timerContainer = document.querySelector(".countdown-container");
    if (timerContainer) {
      const timer = new OptimizedCountdownTimer(30);

      // Cleanup al salir de la página
      window.addEventListener("beforeunload", () => {
        timer.destroy();
      });
    }
  });
</script>
